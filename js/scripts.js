/**
 * wAllICzech Studio - Hlavn√≠ JavaScriptov√Ω soubor
 * 
 * Tento soubor obsahuje ve≈°kerou funkcionalitu pro spr√°vu t√©mat a u≈æivatelsk√©ho rozhran√≠.
 */

// ===========================================
// KONFIGURACE T√âMAT
// ===========================================

/**
 * Seznam dostupn√Ωch t√©mat
 * @type {string[]}
 */
const styleThemes = [
    'default',      // V√Ωchoz√≠ styl
    'cyberWeed',    // Zelen√© t√©ma
    'cyberPink',    // R≈Ø≈æov√© t√©ma
    'cyberBlue',    // Modr√© t√©ma
    'cyberOrange',  // Oran≈æov√© t√©ma
    'cyberPurple'   // Fialov√© t√©ma
];

/**
 * Definice barev pro r≈Øzn√° t√©mata
 * @type {Object.<string, {primary: string, primaryInvert: string, accent: string, accentInvert: string, glow: string, bg: string, text: string, textInvert: string}>}
 */
const themeColors = {
    default: {
        primary: "#ff4500",
        primaryInvert: "#000000",
        accent: "#ff5500",
        accentInvert: "#ba1787",
        glow: "#ff007a",
        bg: "#0a0a0a",
        text: "#eaffea",
        textInvert: "#000000"
    },
    cyberWeed: {
        primary: "#00ff88",
        primaryInvert: "#000000",
        accent: "#33ffaa",
        accentInvert: "#000000",
        glow: "#00ffcc",
        bg: "#001f1a",
        text: "#eaffea",
        textInvert: "#000000"
    },
    cyberPink: {
        primary: "#ff77ff",
        primaryInvert: "#000000",
        accent: "#ff99ff",
        accentInvert: "#000000",
        glow: "#ffaaee",
        bg: "#2b002b",
        text: "#ffffff",
        textInvert: "#000000"
    },
    cyberBlue: {
        primary: "#00a8ff",
        primaryInvert: "#000000",
        accent: "#00f7ff",
        accentInvert: "#000000",
        glow: "#00e5ff",
        bg: "#000a1a",
        text: "#e6f7ff",
        textInvert: "#000000"
    },
    cyberOrange: {
        primary: "#ff8c00",
        primaryInvert: "#9b2525",
        accent: "#ffbb33",
        accentInvert: "#9b2525",
        glow: "#ffaa33",
        bg: "#1a0a00",
        text: "#fff0e6",
        textInvert: "#000000"
    },
    cyberPurple: {
        primary: "#b300ff",
        primaryInvert: "#000000",
        accent: "#cc66ff",
        accentInvert: "#000000",
        glow: "#cc99ff",
        bg: "#0a001a",
        text: "#f2e6ff",
        textInvert: "#000000"
    }
};

// ===========================================
// SPR√ÅVA T√âMAT
// ===========================================

/**
 * Aplikuje zvolen√© t√©ma na str√°nku
 * @param {string} themeName - N√°zev t√©matu z themeColors
 * @returns {void}
 */
function applyTheme(themeName) {
    console.log('üîÑ Aplikuji barevn√© sch√©ma:', themeName);
    
    // Z√≠sk√°n√≠ barev pro zvolen√© t√©ma nebo v√Ωchoz√≠ho t√©matu
    const colors = themeColors[themeName] || themeColors.default;
    const root = document.documentElement;
    
    // Nastaven√≠ z√°kladn√≠ch barevn√Ωch promƒõnn√Ωch
    root.style.setProperty('--color-primary', colors.primary);
    root.style.setProperty('--color-primary-invert', colors.primaryInvert);
    root.style.setProperty('--color-accent', colors.accent);
    root.style.setProperty('--color-accent-invert', colors.accentInvert);
    root.style.setProperty('--color-glow', colors.glow);
    root.style.setProperty('--color-bg', colors.bg);
    root.style.setProperty('--color-text', colors.text);
    root.style.setProperty('--color-text-invert', colors.textInvert);
    
    // Definice efekt≈Ø
    const effects = {
        shadow: `0 0 5px ${colors.accent}, 0 0 10px ${colors.glow}`,
        glow: `0 0 5px #fff, 0 0 10px #fff, 0 0 20px ${colors.glow}, 0 0 40px ${colors.glow}`,
        strongGlow: `0 0 10px ${colors.accent}, 0 0 20px ${colors.glow}, 0 0 30px ${colors.glow}, 0 0 50px ${colors.glow}`,
        textGlow: `0 0 2px ${colors.accent}, 0 0 6px ${colors.glow}`,
        boxShadow: `0 0 10px ${colors.accent}, 0 0 20px ${colors.glow}`,
        border: `2px solid ${colors.primary}`,
        borderThin: `1px solid ${colors.primary}`,
        borderThick: `3px solid ${colors.primary}`,
        borderInset: `inset 0 0 10px ${colors.glow}, inset 0 0 20px ${colors.glow}`,
        gradient: `linear-gradient(45deg, ${colors.primary}, ${colors.accent})`,
        gradientHorizontal: `linear-gradient(90deg, ${colors.primary}, ${colors.accent})`,
        gradientVertical: `linear-gradient(180deg, ${colors.primary}, ${colors.accent})`
    };
    
    // Aplikov√°n√≠ efekt≈Ø jako CSS promƒõnn√Ωch
    Object.entries(effects).forEach(([key, value]) => {
        root.style.setProperty(`--neon-${key.toLowerCase()}`, value);
    });
    
    // Aktualizace metatagu pro barvu adresn√≠ho ≈ô√°dku
    updateThemeColor(colors.primary);
    
    // Ulo≈æen√≠ aktu√°ln√≠ho t√©matu
    saveTheme(themeName);
    
    // Ozn√°men√≠ o zmƒõnƒõ t√©matu
    document.dispatchEvent(new CustomEvent('themeChanged', { 
        detail: { 
            theme: themeName,
            colors: colors
        } 
    }));
    
    // P≈ôid√°n√≠ t≈ô√≠dy na tƒõlo pro aktu√°ln√≠ t√©ma
    document.body.className = '';
    document.body.classList.add(`theme-${themeName}`);
    
    console.log('‚úÖ T√©ma √∫spƒõ≈°nƒõ aplikov√°no:', themeName);
}

/**
 * Ulo≈æ√≠ vybran√© t√©ma do localStorage
 * @param {string} theme - N√°zev t√©matu
 * @returns {void}
 */
function saveTheme(theme) {
    try {
        localStorage.setItem('walliczech-theme', theme);
        console.log('üíæ Ukl√°d√°m t√©ma do localStorage:', theme);
    } catch (e) {
        console.error('‚ùå Nepoda≈ôilo se ulo≈æit t√©ma do localStorage:', e);
    }
}

/**
 * Naƒçte ulo≈æen√© t√©ma z localStorage
 * @returns {string} N√°zev t√©matu nebo null, pokud nen√≠ ulo≈æeno
 */
function loadTheme() {
    try {
        const theme = localStorage.getItem('walliczech-theme');
        if (theme) {
            console.log('üìñ Naƒç√≠t√°m ulo≈æen√© t√©ma:', theme);
            return theme;
        }
        return null;
    } catch (e) {
        console.error('‚ùå Nepoda≈ôilo se naƒç√≠st t√©ma z localStorage:', e);
        return null;
    }
}

/**
 * Aktualizuje barvu adresn√≠ho ≈ô√°dku v prohl√≠≈æeƒçi
 * @param {string} color - Barva v hex form√°tu
 * @returns {void}
 */
function updateThemeColor(color) {
    const themeColor = document.querySelector('meta[name="theme-color"]');
    if (themeColor) {
        themeColor.setAttribute('content', color);
        console.log('üé® Aktualizuji barvu adresn√≠ho ≈ô√°dku na:', color);
    }
}

/**
 * Vr√°t√≠ n√°zev aktu√°ln√≠ho t√©matu
 * @returns {string} N√°zev aktu√°ln√≠ho t√©matu
 */
function getCurrentTheme() {
    const savedTheme = loadTheme();
    return savedTheme || 'default';
}

/**
 * Vr√°t√≠ index aktu√°ln√≠ho t√©matu v poli styleThemes
 * @returns {number} Index t√©matu
 */
function getCurrentThemeIndex() {
    const currentTheme = getCurrentTheme();
    return styleThemes.indexOf(currentTheme);
}

/**
 * P≈ôepne na dal≈°√≠ t√©ma v po≈ôad√≠
 * @returns {string} N√°zev nov√©ho t√©matu
 */
function cycleToNextTheme() {
    const currentIndex = getCurrentThemeIndex();
    const nextIndex = (currentIndex + 1) % styleThemes.length;
    const nextTheme = styleThemes[nextIndex];
    applyTheme(nextTheme);
    return nextTheme;
}

/**
 * Inicializuje tlaƒç√≠tko pro p≈ôep√≠n√°n√≠ t√©mat
 * @returns {void}
 */
function initThemeToggle() {
    const toggleBtn = document.getElementById('theme-toggle');
    if (!toggleBtn) return;
    
    toggleBtn.addEventListener('click', (e) => {
        e.preventDefault();
        const newTheme = cycleToNextTheme();
        
        // Animace tlaƒç√≠tka
        toggleBtn.classList.add('theme-toggle--active');
        setTimeout(() => {
            toggleBtn.classList.remove('theme-toggle--active');
        }, 300);
        
        console.log('üîÑ P≈ôep√≠n√°m na t√©ma:', newTheme);
    });
    
    console.log('‚úÖ Inicializov√°no tlaƒç√≠tko pro p≈ôep√≠n√°n√≠ t√©mat');
}

// ===========================================
// INICIALIZACE APLIKACE
// ===========================================

/**
 * Hlavn√≠ funkce pro inicializaci aplikace
 * @returns {void}
 */
function initApp() {
    // Naƒçten√≠ ulo≈æen√©ho t√©matu
    const savedTheme = loadTheme() || 'default';
    applyTheme(savedTheme);
    
    // Inicializace komponent
    initThemeToggle();
    initInteractiveElements();
    
    console.log('üöÄ Aplikace inicializov√°na s t√©matem:', savedTheme);
}

/**
 * Inicializuje interaktivn√≠ prvky na str√°nce
 * @returns {void}
 */
function initInteractiveElements() {
    // Inicializace tooltip≈Ø
    initTooltips();
    
    // Inicializace formul√°≈ô≈Ø
    initForms();
    
    // Inicializace tlaƒç√≠tek s efekty
    initButtonEffects();
    
    console.log('‚úÖ Inicializov√°ny interaktivn√≠ prvky');
}

/**
 * Inicializuje tooltipy
 * @returns {void}
 */
function initTooltips() {
    const tooltips = document.querySelectorAll('[data-tooltip]');
    
    tooltips.forEach(tooltip => {
        tooltip.addEventListener('mouseenter', showTooltip);
        tooltip.addEventListener('mouseleave', hideTooltip);
    });
    
    console.log('‚úÖ Inicializov√°ny tooltipy');
}

/**
 * Zobraz√≠ tooltip
 * @param {MouseEvent} e - Ud√°lost my≈°i
 * @returns {void}
 */
function showTooltip(e) {
    const tooltip = e.currentTarget;
    const tooltipText = tooltip.getAttribute('data-tooltip');
    if (!tooltipText) return;
    
    const tooltipElement = document.createElement('div');
    tooltipElement.className = 'tooltip';
    tooltipElement.textContent = tooltipText;
    
    document.body.appendChild(tooltipElement);
    
    const rect = tooltip.getBoundingClientRect();
    const tooltipRect = tooltipElement.getBoundingClientRect();
    
    // Pozicov√°n√≠ tooltipu
    const top = rect.top - tooltipRect.height - 10;
    const left = rect.left + (rect.width / 2) - (tooltipRect.width / 2);
    
    tooltipElement.style.top = `${Math.max(10, top)}px`;
    tooltipElement.style.left = `${Math.max(10, Math.min(window.innerWidth - tooltipRect.width - 10, left))}px`;
    tooltipElement.classList.add('show');
    
    // Ulo≈æen√≠ reference pro pozdƒõj≈°√≠ odstranƒõn√≠
    tooltip._tooltipElement = tooltipElement;
}

/**
 * Skryje tooltip
 * @param {MouseEvent} e - Ud√°lost my≈°i
 * @returns {void}
 */
function hideTooltip(e) {
    const tooltip = e.currentTarget;
    if (tooltip._tooltipElement) {
        tooltip._tooltipElement.remove();
        delete tooltip._tooltipElement;
    }
}

/**
 * Inicializuje formul√°≈ôe
 * @returns {void}
 */
function initForms() {
    const forms = document.querySelectorAll('form');
    
    forms.forEach(form => {
        form.addEventListener('submit', handleFormSubmit);
    });
    
    console.log('‚úÖ Inicializov√°ny formul√°≈ôe');
}

/**
 * Zpracuje odesl√°n√≠ formul√°≈ôe
 * @param {Event} e - Ud√°lost odesl√°n√≠ formul√°≈ôe
 * @returns {Promise<void>}
 */
async function handleFormSubmit(e) {
    e.preventDefault();
    
    const form = e.currentTarget;
    const submitButton = form.querySelector('button[type="submit"]');
    const originalText = submitButton ? submitButton.innerHTML : '';
    
    // Zobrazen√≠ naƒç√≠t√°n√≠
    if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '<span class="spinner"></span> Odes√≠l√°m...';
    }
    
    try {
        // Zde by bylo odesl√°n√≠ formul√°≈ôe
        // const formData = new FormData(form);
        // const response = await fetch(form.action, {
        //     method: form.method,
        //     body: formData
        // });
        // const result = await response.json();
        
        // Simulace zpo≈ædƒõn√≠
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // Zobrazen√≠ √∫spƒõchu
        showNotification('Hotovo!', 'Formul√°≈ô byl √∫spƒõ≈°nƒõ odesl√°n.', 'success');
    } catch (error) {
        console.error('Chyba p≈ôi odes√≠l√°n√≠ formul√°≈ôe:', error);
        showNotification('Chyba', 'Nƒõco se pokazilo p≈ôi odes√≠l√°n√≠ formul√°≈ôe.', 'error');
    } finally {
        // Obnoven√≠ tlaƒç√≠tka
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = originalText;
        }
    }
}

/**
 * Inicializuje efekty tlaƒç√≠tek
 * @returns {void}
 */
function initButtonEffects() {
    const buttons = document.querySelectorAll('.btn, button, [role="button"]');
    
    buttons.forEach(button => {
        // Efekt p≈ôi najet√≠ my≈°√≠
        button.addEventListener('mouseenter', createRippleEffect);
        
        // Efekt p≈ôi stisknut√≠
        button.addEventListener('mousedown', (e) => {
            button.style.transform = 'scale(0.98)';
        });
        
        button.addEventListener('mouseup', () => {
            button.style.transform = '';
        });
        
        button.addEventListener('mouseleave', () => {
            button.style.transform = '';
        });
    });
    
    console.log('‚úÖ Inicializov√°ny efekty tlaƒç√≠tek');
}

/**
 * Vytvo≈ô√≠ efekt vlnky p≈ôi najet√≠ my≈°√≠ na tlaƒç√≠tko
 * @param {MouseEvent} e - Ud√°lost my≈°i
 * @returns {void}
 */
function createRippleEffect(e) {
    const button = e.currentTarget;
    const rect = button.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    
    const ripple = document.createElement('span');
    ripple.className = 'ripple';
    ripple.style.left = `${x}px`;
    ripple.style.top = `${y}px`;
    
    button.appendChild(ripple);
    
    // Odstranƒõn√≠ efektu po dokonƒçen√≠ animace
    ripple.addEventListener('animationend', () => {
        ripple.remove();
    });
}

/**
 * Zobraz√≠ notifikaci
 * @param {string} title - Nadpis notifikace
 * @param {string} message - Zpr√°va
 * @param {string} type - Typ notifikace (success, error, warning, info)
 * @returns {void}
 */
function showNotification(title, message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification--${type}`;
    
    const iconMap = {
        success: '‚úì',
        error: '‚úó',
        warning: '‚ö†',
        info: '‚Ñπ'
    };
    
    notification.innerHTML = `
        <div class="notification__icon">${iconMap[type] || '‚Ñπ'}</div>
        <div class="notification__content">
            <div class="notification__title">${title}</div>
            <div class="notification__message">${message}</div>
        </div>
        <button class="notification__close">√ó</button>
    `;
    
    document.body.appendChild(notification);
    
    // P≈ôid√°n√≠ t≈ô√≠dy pro animaci zobrazen√≠
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);
    
    // Nastaven√≠ ƒçasovaƒçe pro automatick√© skryt√≠
    const timeout = setTimeout(() => {
        hideNotification(notification);
    }, 5000);
    
    // Tlaƒç√≠tko pro zav≈ôen√≠
    const closeButton = notification.querySelector('.notification__close');
    closeButton.addEventListener('click', () => {
        clearTimeout(timeout);
        hideNotification(notification);
    });
    
    // Kliknut√≠ mimo notifikaci ji tak√© zav≈ôe
    notification.addEventListener('click', (e) => {
        if (e.target === notification) {
            clearTimeout(timeout);
            hideNotification(notification);
        }
    });
    
    console.log(`üì¢ Zobrazena notifikace: ${title} - ${message}`);
}

/**
 * Skryje notifikaci
 * @param {HTMLElement} notification - Element notifikace
 * @returns {void}
 */
function hideNotification(notification) {
    notification.classList.remove('show');
    notification.classList.add('hide');
    
    // Odstranƒõn√≠ z DOMu po skonƒçen√≠ animace
    notification.addEventListener('transitionend', () => {
        notification.remove();
    }, { once: true });
}

// Spu≈°tƒõn√≠ aplikace po naƒçten√≠ DOMu
document.addEventListener('DOMContentLoaded', initApp);
