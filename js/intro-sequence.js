// Intro sekvence pro SYNTHOMA Reader
document.addEventListener('DOMContentLoaded', () => {
    // KONSTANTA VE STYLU ZOMBIE: Text manifestu
    const MANIFEST_TEXT = "Tma nikdy nen√≠ opravdov√°, je jen svƒõtlem, kter√© se vzdalo smyslu.";
    
    // Kontejnery a elementy
    const manifestContainer = document.getElementById('manifest-container');
    const continueButtonContainer = document.getElementById('continue-button-container');
    const continueButton = document.getElementById('continue-button');
    const readerContent = document.getElementById('reader-content');
    
    // Funkce kontroluj√≠c√≠ existenci shinning efektu
    function isShinningSupportedFn() {
        return typeof window.startShinning === 'function';
    }
    
    // =======================================
    // SUPER ZOMBIE OCHRANA P≈òED ANIMATION MANAGEREM
    // =======================================
    function setupZombieProtection() {
        // 1. Ulo≈æ√≠me origin√°ln√≠ funkce, kter√© budeme mƒõnit
        const originalStopShinning = window.stopShinning;
        const originalStopAll = window.animationManager ? window.animationManager.stopAll : null;
        
        // 2. Udr≈æuje stav textu manifestu
        let savedManifestHTML = '';
        
        // 3. Uchovej stav manifestu p≈ôed jak√Ωmkoliv z√°sahem
        function saveManifestState() {
            if (manifestContainer && manifestContainer.innerHTML) {
                console.log('ü§° ZOMBIE: Ukl√°d√°m stav manifestu pro p≈ôe≈æit√≠!'); 
                savedManifestHTML = manifestContainer.innerHTML;
                // Ulo≈æ√≠me i jako dataset pro z√°lo≈æn√≠ obnovu p≈ô√≠mo v DOM
                manifestContainer.dataset.zombieContent = savedManifestHTML;
            }
        }
        
        // 4. Obnov manifest pokud byl smaz√°n
        function restoreManifest() {
            if (manifestContainer && savedManifestHTML && !manifestContainer.innerHTML.trim()) {
                console.log('üí• ZOMBIE O≈ΩIVEN: Obnoven√≠ zmizel√©ho textu manifestu!');
                manifestContainer.innerHTML = savedManifestHTML;
                manifestContainer.classList.add('shinning');
                
                // Reset shinning efektu pokud existuje funkce
                if (typeof window.startShinning === 'function') {
                    try {
                        window.startShinning();
                    } catch (e) {
                        console.error('ZOMBIE ERR: Nelze obnovit shinning', e);
                    }
                }
            }
        }
        
        // 5. P≈ôepisujeme funkci stopShinning, aby ignorovala n√°≈° manifest!
        if (typeof window.stopShinning === 'function') {
            console.log('üíÄ ZOMBIE PATCH: Nahrazuji stopShinning...');
            window.stopShinning = function() {
                // Ulo≈æ√≠me stav manifestu p≈ôed akc√≠ origin√°ln√≠ funkce
                saveManifestState();
                
                // Zavol√°me origin√°ln√≠ funkci
                if (originalStopShinning) originalStopShinning();
                
                // Obnov√≠me manifest
                setTimeout(restoreManifest, 50);
                setTimeout(restoreManifest, 250); // Dvojit√© ji≈°tƒõn√≠ pro vyt√≠≈æen√© syst√©my
            };
        }
        
        // 6. P≈ôepisujeme tak√© stopAll v animationManageru, aby n√°m neponizel manifest
        if (window.animationManager && typeof window.animationManager.stopAll === 'function') {
            console.log('üíÄ ZOMBIE PATCH: Nahrazuji animationManager.stopAll...');
            window.animationManager.stopAll = function() {
                // Ulo≈æ√≠me stav manifestu p≈ôed akc√≠
                saveManifestState();
                
                // Zavol√°me origin√°ln√≠ funkci
                if (originalStopAll) originalStopAll.call(window.animationManager);
                
                // Obnov√≠me manifest
                setTimeout(restoreManifest, 50);
                setTimeout(restoreManifest, 250); // Dvojit√© ji≈°tƒõn√≠ pro vyt√≠≈æen√© syst√©my
            };
        }
        
        // 7. P≈ôid√°v√°me MutationObserver pro sledov√°n√≠ zmƒõn v manifestu
        const observer = new MutationObserver((mutations) => {
            mutations.forEach(mutation => {
                if (mutation.target === manifestContainer && 
                    mutation.type === 'childList' &&
                    !manifestContainer.innerHTML.trim() && 
                    savedManifestHTML) {
                    console.log('üí• OBSERVER: Manifest byl vymaz√°n! Obnoven√≠...');
                    setTimeout(() => {
                        restoreManifest();
                        if (typeof window.startShinning === 'function') {
                            window.startShinning();
                        }
                    }, 50);
                }
            });
        });
        
        observer.observe(manifestContainer, {
            childList: true,
            subtree: true,
            characterData: true
        });
        
        // 8. Z√°lo≈æn√≠ interval pro pravideln√© kontroly, ≈æe m√°me stav ulo≈æen√Ω
        let zombieInterval = setInterval(() => {
            // Ukl√°d√°me obsah, pokud je v manifestu nƒõco k ulo≈æen√≠
            if (manifestContainer && manifestContainer.innerHTML.trim()) {
                saveManifestState();
            } 
            // Obnovujeme obsah, pokud je manifest pr√°zdn√Ω ale m√°me co obnovit
            else if (manifestContainer && !manifestContainer.innerHTML.trim() && savedManifestHTML) {
                restoreManifest();
            }
        }, 1000);
        
        // Vra≈• funkci pro ƒçi≈°tƒõn√≠ interval≈Ø, kdyby bylo pot≈ôeba
        return function cleanup() {
            observer.disconnect();
            clearInterval(zombieInterval);
        };
    }
    
    // Nastartujeme zombifikovanou ochranu p≈ôed z√°sahem animation managera
    const zombieCleanup = setupZombieProtection();
    
    // ZOMBIE OPRAVUJE: Vyƒçist√≠me kontejner od v≈°ech m√Ωch pokus≈Ø
    manifestContainer.innerHTML = '';
    
    // FIX: Zji≈°tƒõn√≠ existence shinning skriptu
    const isShiningSupported = typeof window.startShinning === 'function' && 
                              typeof window.stopShinning === 'function';
    
    console.log('ZOMBIE LOG: üí• Shinning skripty ' + (isShiningSupported ? 'EXISTUJ√ç üòà' : 'NEEXISTUJ√ç üò≠'));
    
    /**
     * Vytvo≈ôen√≠ struktury pro shinning efekt - rozdƒõl√≠ text na jednotliv√© 
     * znaky obalene ve span s pot≈ôebn√Ωmi t≈ô√≠dami
     */
    function createShiningHTML(text) {
        let html = '';
        for (let i = 0; i < text.length; i++) {
            const char = text[i];
            if (char === ' ') {
                html += ' ';
            } else {
                html += `<span class="neon-char bright">${char}</span>`;
            }
        }
        return html;
    }
    
    /**
     * Nov√Ω typewriter efekt - mnohem jednodu≈°≈°√≠ a funkƒçn√≠ ƒçist√Ω p≈ô√≠stup
     * - Vypisuje text p≈ô√≠mo jako span elementy s n√°le≈æitou t≈ô√≠dou
     * - V≈Øbec nemodifikuje DOM v√≠cekr√°t, jen jednou zap√≠≈°e v√Ωsledek
     * - Po ukonƒçen√≠ aktivuje shinning efekt pomoc√≠ p≈Øvodn√≠ho skriptu
     */
    async function typewriterEffect() {
        // 0. Ujist√≠me se, ≈æe manifest je pr√°zdn√Ω a tlaƒç√≠tko skryt√©
        manifestContainer.innerHTML = '';
        continueButtonContainer.classList.add('hidden');
        
        // 1. Nastav√≠me parametry efektu
        const speedMin = 50; // ms
        const speedMax = 120; // ms
        const text = MANIFEST_TEXT;
        let currentHTML = '';
        
        // !!! ZOMBIE FIX !!! P≈ôid√°v√°me shinning t≈ô√≠du, bez n√≠ to nefunguje!!!
        manifestContainer.classList.add('shinning');
        
        // 2. Postupnƒõ vypisujeme ka≈æd√Ω znak jako span element
        try {
            for (let i = 0; i < text.length; i++) {
                // P≈ôid√°me znak buƒè jako span nebo jako mezeru
                if (text[i] === ' ') {
                    currentHTML += ' ';
                } else {
                    currentHTML += `<span class="neon-char bright">${text[i]}</span>`;
                }
                
                // Aktualizujeme obsah a ƒçek√°me
                manifestContainer.innerHTML = currentHTML;
                
                // N√°hodn√° prodleva pro p≈ôirozenƒõj≈°√≠ efekt
                const delay = Math.random() * (speedMax - speedMin) + speedMin;
                await new Promise(resolve => setTimeout(resolve, delay));
            }
            
            // ü§° V√ùpis ZOMBIE: Pokud jsme se dostali sem, typov√°n√≠ bylo dokonƒçeno
            console.log('ü§° Typov√°n√≠ HOTOVO! - Aktivuji shinning efekt...');
            
            // 3. Aktivace shinning efektu - TED UZ OPRAVDU FUNGUJICI ZOMBIE VERZE!!!
            try {
                console.log('üí• ZOMBIE KONECNE OZIVUJE SHINNING EFEKT! üí•');
                
                // Zajist√≠me, ≈æe m√°me spr√°vn√© t≈ô√≠dy
                if (!manifestContainer.classList.contains('shinning')) {
                    console.log('üî• P≈ôid√°v√°m shinning t≈ô√≠du na manifest!'); 
                    manifestContainer.classList.add('shinning');
                }
                
                // MOCN√â ZOMBIE O≈ΩIVEN√ç: V√≠me, ≈æe startShinning() bere selektor '.shinning'
                // a s n√≠m pracuje. Zajist√≠me, ≈æe funkce bude vol√°na a≈æ PO kompletn√≠m vykreslen√≠ DOM!
                setTimeout(() => {
                    if (typeof window.startShinning === 'function') {
                        // Pr√°vƒõ teƒè by mƒõl manifest m√≠t v≈°echny span tagy s classou "neon-char bright"
                        window.startShinning();
                        console.log('‚ú®‚ú®‚ú® SHINNING BYL AKTIVOV√ÅN! ‚ú®‚ú®‚ú®');
                    } else {
                        console.error('‚ö†Ô∏è KRITICK√Å CHYBA: window.startShinning neexistuje!');
                        // Z√°lo≈æn√≠ ≈ôe≈°en√≠ - pokusme se reaplikovat flicker efekt p≈ô√≠mo
                        const flickerChars = manifestContainer.querySelectorAll('.neon-char');
                        console.log(`Na≈°el jsem ${flickerChars.length} znak≈Ø k animaci...`);
                        
                        // Pokud nem√°me startShinning, vytvo≈ô√≠me vlastn√≠ flicker 
                        flickerChars.forEach(char => {
                            setTimeout(() => {
                                char.classList.add('flickering');
                                setTimeout(() => char.classList.remove('flickering'), 100 + Math.random() * 200);
                            }, Math.random() * 2000);
                        });
                    }
                }, 100); // Poƒçk√°me na vykreslen√≠ DOM
                
                // Nikdy nen√≠ dost ji≈°tƒõn√≠
                setTimeout(() => {
                    // Druh√Ω pokus o aktivaci (pro jistotu)
                    if (typeof window.startShinning === 'function') {
                        window.startShinning();
                    }
                }, 500);
                
            } catch (e) {
                console.error('üí• ZOMBIE ERR: Selhalo aktivov√°n√≠ shinning efektu:', e);
            }
            
            // 4. Po kr√°tk√© prodlevƒõ zobraz√≠me tlaƒç√≠tko
            setTimeout(() => {
                continueButtonContainer.classList.remove('hidden');
                continueButton.classList.add('fade-in');
                console.log('ü§° Tlaƒç√≠tko ODHALENO!');
            }, 800);
            
        } catch (error) {
            // Pokud nƒõco sel≈æe, p≈ô√≠mo vlo≈æ√≠me cel√Ω text s efektem
            console.error('ü§° Chyba p≈ôi typewriter efektu:', error);
            manifestContainer.innerHTML = createShiningHTML(text);
            
            // Obnov√≠me shinning efekt a zobraz√≠me tlaƒç√≠tko
            if (isShiningSupported) window.startShinning();
            
            continueButtonContainer.classList.remove('hidden');
            continueButton.classList.add('fade-in');
        }
    }
    
    /**
     * P≈ôehr√°n√≠ hudby - hled√° r≈Øzn√© mo≈ænosti p≈ôehr√°vaƒç≈Ø
     * ZOMBIE FIX: Pou≈æito spr√°vn√© ID 'play-pause-btn' m√≠sto 'audio-play-button'
     */
    function playBackgroundMusic() {
        try {
            console.log('üí• ZOMBIE ≈òVE: Spou≈°t√≠m hudebn√≠ podkres apokalypsy!');
            
            // 1. Nejprve zkus√≠me tlaƒç√≠tko z HTML - ID=play-pause-btn
            const playPauseBtn = document.getElementById('play-pause-btn');
            if (playPauseBtn) {
                console.log('üéµ Nalezeno tlaƒç√≠tko pro p≈ôehr√°v√°n√≠ - klik√°m na nƒõj!');
                playPauseBtn.click();
                return true;
            }
            
            // 2. Z√°lo≈æn√≠ varianta - audio p≈ôes querySelector
            const playButton = document.querySelector('#audio-play-button');
            if (playButton) {
                console.log('üéµ Nalezen sekund√°rn√≠ p≈ôehr√°vaƒç');
                playButton.click();
                return true;
            }
            
            // 3. P≈ô√≠m√© p≈ôehr√°n√≠ pomoc√≠ audio elementu
            const audioPlayer = document.querySelector('audio');
            if (audioPlayer) {
                console.log('üéµ P≈ô√≠m√© p≈ôehr√°n√≠ audia - m≈Ø≈æe selhat kv≈Øli z√°sahu ZOMBIE BLOKER≈Æ!');
                audioPlayer.play().catch(e => {
                    console.error('üò± Autoplay selhalo:', e);
                    console.log('U≈æivatel mus√≠ kliknout na p≈ôehr√°vaƒç!');
                    
                    // Jestli m√°me fallback tlaƒç√≠tko, pou≈æijeme ho
                    if (playPauseBtn) {
                        console.log('Zkusme fallback p≈ôehr√°n√≠ po chybƒõ...');
                        setTimeout(() => playPauseBtn.click(), 500);
                    }
                });
                return true;
            }
            
            console.error('üí• ≈Ω√°dn√Ω zombie p≈ôehr√°vaƒç nebyl nalezen! MRTVO TICHO.');
            return false;
        } catch (e) {
            console.error('üí• ZOMBIE P≈òEHR√ÅVAƒå EXPLODOVAL:', e);
            return false;
        }
    }
    
    // Spust√≠me cel√Ω proces po naƒçten√≠ str√°nky
    setTimeout(() => {
        console.log('üí• ZOMBIE INICIOV√ÅN! Spou≈°t√≠m sekvenci...');
        // Nejprve se ujist√≠me, ≈æe tlaƒç√≠tko je skryt√©
        continueButtonContainer.classList.add('hidden');
        
        // Nastartujeme typewriter efekt
        typewriterEffect();
    }, 1000);
    
    // Tlaƒç√≠tko Pokraƒçovat - odhaluje obsah a spou≈°t√≠ zvuk
    continueButton.addEventListener('click', () => {
        console.log('üíÄ U≈æivatel klikl na Pokraƒçovat!');
        
        // 1. Spustit audio
        playBackgroundMusic();
        
        // 2. Animace tlaƒç√≠tka - odchod
        continueButton.classList.remove('fade-in');
        continueButton.classList.add('fade-out');
        
        // 3. Po kr√°tk√© prodlevƒõ skr√Ωt tlaƒç√≠tko a uk√°zat ƒçteƒçku
        setTimeout(() => {
            // Skr√Ωt kontejner s tlaƒç√≠tkem
            continueButtonContainer.classList.add('hidden');
            
            // Zobrazit obsah ƒçteƒçky s pƒõknou animac√≠
            readerContent.classList.remove('hidden');
            readerContent.classList.add('fade-in');
            
            console.log('üî• ƒåTEƒåKA AKTIVOV√ÅNA!');
        }, 500); // Prodleva pro animaci
    });
}); // Konec DOMContentLoaded
